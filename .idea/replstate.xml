<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1427453196157">{:repl-history {:ide [], :local [&quot;(pwsDjt #{#{\\U} #{\\s} #{\\e \\R \\E} #{\\P \\L} #{\\.}})&quot; &quot;hello&quot; &quot;(mMap \&quot;o\&quot; [1 2 3])&quot; &quot;((fn mRev [h &amp; t] (if t (conj (mRev t) h) h)) [1 2 3 4 5])&quot; &quot;((fn mRev [h &amp; t] (if t (conj h (mRev t)) h)) [1 2 3 4 5])&quot; &quot;((fn mRev [[h &amp; t]] (if t (conj h (mRev t)) h)) [1 2 3 4 5])&quot; &quot;((fn mRev [h &amp; t] (if t (cons h (mRev t)) h)) [1 2 3 4 5])&quot; &quot;(fn mRev [x] (if x (cons (last x) (mRev (take (- (count x) 1) x)) nil)) [1 2 3 4 5])\n  \n \n  \n  \n  \n  \n  \n&quot; &quot;((fn mRev [x] (if x (cons (last x) (mRev (take (- (count x) 1) x)) nil)))  [1 2 3 4 5])\n  \n \n  \n  \n  \n  \n  \n&quot; &quot;(defn mRev [x] (if x (cons (last x) (mRev (take (- (count x) 1) x)) nil)))&quot; &quot;((fn mRev [x] (if x (cons (last x) (mRev (take (- (count x) 1) x)) nil)))[ 1 2 3 4 5])&quot; &quot;(mRev [1 2 3 4 5])&quot; &quot;(= (mFlat '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6))&quot; &quot;(count 5)&quot; &quot;(cons 2 [1 3])&quot; &quot;(cons 2 `(1 3))&quot; &quot;(conj [1 2] [3 4])&quot; &quot;(concat [1 2] [3 4])&quot; &quot;(= (mFlatten '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6))&quot; &quot;(mFlatten '((1 2) 3 [4 [5 6]]))&quot; &quot;(nth [1 2] 2)&quot; &quot;(mInterleave [:a :b :c] [1 2])&quot; &quot;(unique [1 2 2 3 4 4 5 6 5])&quot; &quot;(#(mapcat (fn [x] (take %2 (cycle x))) %1) [1 2 3] 2)&quot; &quot;((fn [x y] (take y (cycle x))) 2 3)&quot; &quot;(take 2 (cycle 3))&quot; &quot;(reduce + [3 4 6])&quot; &quot;(reduce concat [3 4 6])&quot; &quot;(reduce concat [[3] [4] [6]])&quot; &quot;(sep 0 [1 2 3])&quot; &quot;(conj [1 2 3] [])&quot; &quot;(conj [1 2 3] nil)&quot; &quot;(pack [1 1 2 1 1 1 3 3])&quot; &quot;(range)&quot;], :remote []}}</component>
</project>